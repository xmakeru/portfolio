// Когда надо одновременно отобразить несколько страниц.
// Например, панель управления с несколькими секциями, интерфейсы с разделенным видом, многопанельные layouts,
// комплексные интерфейсы администратора, ну и любой ui, разделы которого должны работать независимо.

// Главные преимущества: независимая route handling и поднавигация (каждый слот - как отдельное mini-app).
// Если пропишем линк внутри слота на ОБЫЧНУЮ вложенную страницу - навигация сработает как надо, не смотря на то что это не слот. Это и называется subnavigation.
// Но если обновить страницу на этом этапе - некст будет пытаться найти этот линк в каждом слоте - не найдет и выбросить ошибку 404.
// Каждый слот может обрабатывать свою собственную загрузку и состония ошибок.

// Параллельные роуты не являются сегментами маршрута.

// Слоты - это ReactNode, приходят как пропсы, а не как компоненты, и вставляются в JSX как {main}, а не как <Main />

// dashboard > @metrics > page.jsx
//           > @notifications > page.jsx

// unmatched-routes
// dashboard > @metrics > page.jsx + default.jsx
//           > @notifications > page.jsx + default.jsx
//           > page.jsx + default.jsx

// default.jsx это содержимое, которое будет отображаться, когда в роуте у нас вложенная страница какого-то слота, которой нет у других слотов (при перезагрузке!) 
// если не перезагружать, то содержимое слотов будет из @ > page.jsx

// conditional-routes
// когда надо отобразить, например, дэшборд для авторизованных пользователей и страницу входа для незалогиненных.
// совершенно отдельный код на одном url.
// со слоатми. Типо if (что-то) return login (@login>page.jsx) else: return <div>Что-то<div>

// |                       | Conditional Routes                         | Middleware                             |
// | --------------------- | ------------------------------------------ | -------------------------------------- |
// | **Когда срабатывает** | Во время рендера страницы                  | До загрузки страницы                   |
// | **Где работает**      | Внутри компонента или `getServerSideProps` | На уровне всех запросов (edge runtime) |
// | **Доступ к данным**   | Полный (можно использовать user, API, DB)  | Ограниченный (cookies, headers, URL)   |
// | **Тип защиты**        | Локальная (на одной странице)              | Глобальная (на все маршруты)           |
