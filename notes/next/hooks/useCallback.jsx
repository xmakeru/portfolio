// useCallback() - хук, запоминает (мемоизирует) функцию, чтобы она не создавалась заново при
// каждом рендере, если ее зависимости не изменились.

// В React при каждом рендере все функции внутри компонента создаются заново. Даже если они 
// "одинаковые" — технически это новые объекты в памяти. Может вызвать лишние перерисовки 
// дочерних элементов, повторные эффекты (useEffect() с зависимостью на функцию), проблемы с производительностью.

// function MyComponent({ onClick }) {
//   const handleClick = () => {
//     console.log('Кнопка нажата');
//   };

//   return <button onClick={handleClick}>Нажми</button>;
// }  тут handleClick будет создаваться заново на каждом рендере.



// function MyComponent() {
//   const handleClick = useCallback(() => {
//     console.log('Кнопка нажата');
//   }, []); // Зависимости — если они не меняются, функция не пересоздаётся

//   return <button onClick={handleClick}>Нажми</button>;
// } Теперь handleClick будет одна и та же функция между рендерами 
// (если зависимости не изменились).

// Когда применять?
// Ты передаешь функцию в дочерний компонент, и хочешь избежать лишнего рендера
// Функция используется в useEffect или useMemo как зависимость.
// Нужно, чтобы функция оставалась стабильной (не менялась без необходимости).

// НЕ нужен, если ты  не передаёшь функцию дальше (например, в props), и она не участвует в useEffect, useMemo, 
// то использовать useCallback излишне.